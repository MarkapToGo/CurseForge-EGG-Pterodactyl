{
  "_comment": "DO NOT EDIT: FILE GENERATED AUTOMATICALLY BY PANEL",
  "meta": {
    "update_url": null,
    "version": "PTDL_v2"
  },
  "exported_at": "2024-06-01T19:39:54+00:00",
  "name": "CurseForge - Craftoria - Markap",
  "author": "stylelabor+markap@gmail.com",
  "description": "A generic egg for the Craftoria CurseForge modpack.",
  "features": [
    "eula",
    "java_version",
    "pid_limit"
  ],
  "docker_images": {
    "Java 21": "ghcr.io/pterodactyl/yolks:java_21",
    "Java 18": "ghcr.io/pterodactyl/yolks:java_18",
    "Java 17": "ghcr.io/pterodactyl/yolks:java_17",
    "Java 16": "ghcr.io/pterodactyl/yolks:java_16",
    "Java 14": "ghcr.io/pterodactyl/yolks:java_14",
    "Java 11": "ghcr.io/pterodactyl/yolks:java_11",
    "Java 8": "ghcr.io/pterodactyl/yolks:java_8"
  },
  "file_denylist": [],
  "startup": "java $([[ -f user_jvm_args.txt ]] \u0026\u0026 printf %s \"@user_jvm_args.txt\") -Xms128M -Xmx{{SERVER_MEMORY}}M -Dterminal.jline=false -Dterminal.ansi=true $([[ ! -f unix_args.txt ]] \u0026\u0026 printf %s \"-jar `cat .serverjar`\" || printf %s \"@unix_args.txt\")",
  "config": {
    "files": "{\r\n    \"server.properties\": {\r\n        \"parser\": \"properties\",\r\n        \"find\": {\r\n            \"server-ip\": \"0.0.0.0\",\r\n            \"server-port\": \"{{server.build.default.port}}\",\r\n            \"query.port\": \"{{server.build.default.port}}\"\r\n        }\r\n    }\r\n}",
    "logs": "{}",
    "startup": "{\r\n    \"done\": \")! For help, type \"\r\n}",
    "stop": "stop"
  },
  "scripts": {
    "installation": {
      "container": "openjdk:8-jdk-slim",
      "entrypoint": "bash",
      "script": "#!/bin/bash\n# shellcheck disable=SC2155\n#\n# CurseForge Installation Script\n#\n# Server Files: /mnt/server\n\n: \"${SERVER_DIR:=/mnt/server}\"\n: \"${PROJECT_ID:=}\"\n: \"${VERSION_ID:=}\"\n: \"${API_KEY:=}\"\n: \"${VELOCITY_SECRET_KEY:=}\"\n\nif [[ ! -d $SERVER_DIR ]]; then\n    mkdir -p \"$SERVER_DIR\"\nfi\n\nif ! cd \"$SERVER_DIR\"; then\n    echo -e \"Failed to change directory to ${SERVER_DIR}\"\n    exit 1\nfi\n\nfunction install_required {\n    echo -e \"Installing required packages...\"\n    echo -e \"\\tRunning apt update\"\n    apt update > /dev/null 2>&1 || { echo \"apt update failed!\"; exit 1; }\n    echo -e \"\\tRunning apt install\"\n    apt install -y wget jq unzip curl > /dev/null 2>&1 || { echo \"apt install failed!\"; exit 1; }\n}\n\nCURSEFORGE_API_URL=\"https://api.curseforge.com/v1/mods/\"\nCURSEFORGE_API_HEADERS=(\"--header=Accept: application/json\" \"--header=x-api-key: ${API_KEY}\")\n\nfunction get_download {\n    echo -e \"Retrieving CurseForge project information...\"\n    local PROJECT_DATA=$(wget -q \"${CURSEFORGE_API_HEADERS[@]}\" \"${CURSEFORGE_API_URL}${PROJECT_ID}\" -O -)\n    local PROJECT_TITLE=$(echo \"$PROJECT_DATA\" | jq -r '.data.name // empty')\n\n    if [[ -z \"${PROJECT_DATA}\" ]]; then\n        echo -e \"\\tERROR: Failed to retrieve project data for project id '${PROJECT_ID}'\"\n        exit 1\n    fi\n\n    local IS_SERVER_PACK=false\n\n    if [[ -z \"${VERSION_ID}\" || \"${VERSION_ID}\" == \"latest\" ]]; then\n        echo -e \"\\tNo file ID specified, using latest file\"\n        VERSION_ID=$(echo \"$PROJECT_DATA\" | jq -r '.data.mainFileId // empty')\n\n        local VERSION_SERVER_PACK=\"$(echo -e \"${PROJECT_DATA}\" | jq -r --arg VERSION_ID \"$VERSION_ID\" '.data.latestFiles[] | select(.id|tostring==$VERSION_ID) | .isServerPack')\"\n        local VERSION_SERVER_ID=\"$(echo -e \"${PROJECT_DATA}\" | jq -r --arg VERSION_ID \"$VERSION_ID\" '.data.latestFiles[] | select(.id|tostring==$VERSION_ID) | .serverPackFileId')\"\n\n        if [[ \"${VERSION_SERVER_PACK}\" == \"false\" && -n \"${VERSION_SERVER_ID}\" ]]; then\n            echo -e \"\\tFound server pack file id '${VERSION_SERVER_ID}'\"\n            VERSION_ID=$VERSION_SERVER_ID\n            IS_SERVER_PACK=true\n        elif [[ \"${VERSION_SERVER_PACK}\" == \"true\" ]]; then\n            IS_SERVER_PACK=true\n        fi\n    else\n        echo -e \"\\tChecking if provided file id '${VERSION_ID}' exists\"\n\n        local FILE_DATA=$(wget -q \"${CURSEFORGE_API_HEADERS[@]}\" \"${CURSEFORGE_API_URL}${PROJECT_ID}/files/${VERSION_ID}\" -O -)\n\n        if [[ -z \"${FILE_DATA}\" ]]; then\n            echo -e \"\\tERROR: File id '${VERSION_ID}' not found for project '${PROJECT_TITLE}'\"\n            exit 1\n        fi\n\n        IS_SERVER_PACK=$(echo -e \"${FILE_DATA}\" | jq -r '.data.isServerPack // \"false\"')\n\n        if [[ \"${IS_SERVER_PACK}\" == \"false\" ]]; then\n            local VERSION_SERVER_PACK=\"$(echo -e \"${FILE_DATA}\" | jq -r '.data.serverPackFileId // empty')\"\n            if [[ -n \"${VERSION_SERVER_PACK}\" ]]; then\n                echo -e \"\\tFound server pack file id '${VERSION_SERVER_PACK}'\"\n                VERSION_ID=$VERSION_SERVER_PACK\n                IS_SERVER_PACK=true\n            fi\n        else\n            IS_SERVER_PACK=true\n        fi\n    fi\n\n    # Check if version id is unset or empty string\n    if [[ -z \"${VERSION_ID}\" ]]; then\n        echo -e \"\\tERROR: No file id found for project '${PROJECT_TITLE}'\"\n        exit 1\n    fi\n\n    if [[ \"${IS_SERVER_PACK}\" == \"false\" ]]; then\n        echo -e \"\\tWARNING: File id '${VERSION_ID}' is not a server pack, attempting to use client files\"\n    fi\n\n    # get json data to work with\n    echo -e \"\\tRetrieving version information for '${VERSION_ID}'\"\n    local JSON_DATA=$(wget -q \"${CURSEFORGE_API_HEADERS[@]}\" \"${CURSEFORGE_API_URL}${PROJECT_ID}/files/${VERSION_ID}/download-url\" -O -)\n\n    if [[ -z \"${JSON_DATA}\" ]]; then\n        echo -e \"\\tERROR: Failed to retrieve file data for file id '${VERSION_ID}'\"\n        exit 1\n    fi\n\n    echo -e \"\\tParsing CurseForge pack download url\"\n\n    local DOWNLOAD_URL=$(echo -e \"$JSON_DATA\" | jq -r '.data // empty')\n    if [[ -z \"${DOWNLOAD_URL}\" ]]; then\n        echo -e \"\\tERROR: No download url found for file ${VERSION_ID}\"\n        exit 1\n    fi\n\n    # download modpack files\n    echo -e \"\\tDownloading ${DOWNLOAD_URL}\"\n    if ! wget -q \"${DOWNLOAD_URL}\" -O server.zip; then\n        echo -e \"Download failed!\"\n        exit 1\n    fi\n}\n\nfunction get_loader {\n    echo -e \"Retrieving loader information...\"\n\n    local PROJECT_DATA=$(wget -q \"${CURSEFORGE_API_HEADERS[@]}\" \"${CURSEFORGE_API_URL}${PROJECT_ID}\" -O -)\n    local PROJECT_TITLE=$(echo \"$PROJECT_DATA\" | jq -r '.data.name // empty')\n    if [[ -z \"${PROJECT_DATA}\" ]]; then\n        echo -e \"\\tERROR: Failed to retrieve project data for project id '${PROJECT_ID}'\"\n        exit 1\n    fi\n\n    local FILE_DATA=$(wget -q \"${CURSEFORGE_API_HEADERS[@]}\" \"${CURSEFORGE_API_URL}${PROJECT_ID}/files/${VERSION_ID}\" -O -)\n\n    if [[ -z \"${FILE_DATA}\" ]]; then\n        echo -e \"\\tERROR: File id '${VERSION_ID}' not found for project '${PROJECT_TITLE}'\"\n        exit 1\n    fi\n\n    local IS_SERVER_PACK=$(echo -e \"${FILE_DATA}\" | jq -r '.data.isServerPack // \"false\"')\n    local CLIENT_VERSION_ID;\n\n    if [[ \"${IS_SERVER_PACK}\" == \"true\" ]]; then\n        CLIENT_VERSION_ID=\"$(echo -e \"${FILE_DATA}\" | jq -r '.data.parentProjectFileId // empty')\"\n    else\n        CLIENT_VERSION_ID=$VERSION_ID\n    fi\n\n    if [[ -z \"${CLIENT_VERSION_ID}\" ]]; then\n        echo -e \"\\tERROR: File id '${VERSION_ID}' not found for project '${PROJECT_TITLE}'\"\n        exit 1\n    fi\n\n    echo -e \"\\tRetrieving file information for '${CLIENT_VERSION_ID}'\"\n    local JSON_DATA=$(wget -q \"${CURSEFORGE_API_HEADERS[@]}\" \"${CURSEFORGE_API_URL}${PROJECT_ID}/files/${CLIENT_VERSION_ID}/download-url\" -O -)\n\n    echo -e \"\\tParsing CurseForge pack download url\"\n\n    local DOWNLOAD_URL=$(echo -e \"$JSON_DATA\" | jq -r '.data // empty')\n\n    if [[ -z \"${DOWNLOAD_URL}\" ]]; then\n        echo -e \"\\tERROR: No download url found for file id ${CLIENT_VERSION_ID}\"\n        exit 1\n    fi\n\n    # download modpack files\n    echo -e \"\\tDownloading ${DOWNLOAD_URL}\"\n    wget -q \"${DOWNLOAD_URL}\" -O client.zip\n\n    echo -e \"\\tUnpacking client manifest\"\n    unzip -jo client.zip manifest.json -d \"${SERVER_DIR}\"\n    mv \"${SERVER_DIR}/manifest.json\" \"${SERVER_DIR}/client.manifest.json\" # rename to avoid conflicts with main manifest\n    rm -rf client.zip\n\n    echo -e \"\\tParsing client manifest\"\n    local MANIFEST=\"${SERVER_DIR}/client.manifest.json\"\n\n    LOADER_ID=$(jq -r '.minecraft.modLoaders[]? | select(.primary == true) | .id' \"${MANIFEST}\")\n    LOADER_NAME=$(echo \"${LOADER_ID}\" | cut -d'-' -f1)\n    LOADER_VERSION=$(echo \"${LOADER_ID}\" | cut -d'-' -f2)\n\n    if [[ -z \"${LOADER_NAME}\" || -z \"${LOADER_VERSION}\" ]]; then\n        echo -e \"\\tERROR: No loader found in client manifest!\"\n        exit 1\n    fi\n\n    MINECRAFT_VERSION=$(jq -r '.minecraft.version // empty' \"${MANIFEST}\")\n\n    if [[ -z \"${MINECRAFT_VERSION}\" ]]; then\n        echo -e \"\\tERROR: No minecraft version found in client manifest!\"\n        exit 1\n    fi\n\n    echo -e \"\\tFound loader ${LOADER_NAME} ${LOADER_VERSION} for Minecraft ${MINECRAFT_VERSION}\"\n}\n\nfunction download_extra_mods {\n    echo \"Downloading extra mods...\"\n\n    local MODS_DIR=\"${SERVER_DIR}/mods\"\n    mkdir -p \"${MODS_DIR}\"\n\n    local NEOFORWARDING_URL=\"https://cdn.modrinth.com/data/Vbdanw1l/versions/6dFFiwAQ/neoforwarding-1.2.0-1.21.X-NeoForge.jar\"\n    local WorldEdit_URL=\"https://cdn.modrinth.com/data/1u6JkXh5/versions/vBzkrSYP/worldedit-mod-7.3.6.jar\"\n\n    echo \"Downloading NeoForwarding mod...\"\n    if ! wget -q -O \"${MODS_DIR}/neoforwarding-1.0.0-1.21-NeoForge.jar\" \"${NEOFORWARDING_URL}\"; then\n        echo \"Failed to download NeoForwarding mod.\"\n        exit 1\n    fi\n\n    echo \"Downloading WorldEdit mod...\"\n    if ! wget -q -O \"${MODS_DIR}/worldedit-mod-7.3.6.jar\" \"${WorldEdit_URL}\"; then\n        echo \"Failed to download World Edit mod.\"\n        exit 1\n    fi\n\n    echo \"Extra mods downloaded successfully.\"\n}\n\nfunction create_neoforwarding_config {\n    local config_file=\"${SERVER_DIR}/config/neoforwarding-server.toml\"\n    echo \"Creating neoforwarding-server.toml...\"\n    cat <<EOF > \"$config_file\"\n# Use the 'forwarding.secret' from Velocity (and not the default value of '') and insert it here\nforwardingSecret = \"${VELOCITY_SECRET_KEY}\"\n# This must be enabled after you inserted your forwarding secret for the server to accept and send forwarding requests.\n# If disabled the server will act as if the mod is not installed.\nenableForwarding = true\nEOF\n    echo \"neoforwarding-server.toml created successfully.\"\n}\n\nfunction unzip-strip() (\n    set -u\n\n    local archive=$1\n    local destdir=${2:-}\n    shift; shift || :\n    echo -e \"\\tUnpacking ${archive} to ${destdir}\"\n\n    echo -e \"\\tCreating temporary directory\"\n    local tmpdir=/mnt/server/tmp\n    if ! mkdir -p \"${tmpdir}\"; then\n        echo -e \"\\tERROR: mkdir failed to create temporary directory\"\n        return 1\n    fi\n\n    trap 'rm -rf -- \"$tmpdir\"' EXIT\n\n    echo -e \"\\tUnpacking archive\"\n\n    if ! unzip -q \"$archive\" -d \"$tmpdir\"; then\n        echo -e \"\\tERROR: unzip failed to unpack archive\"\n        return 1\n    fi\n\n    echo -e \"\\tSetting glob settings\"\n\n    shopt -s dotglob\n\n    echo -e \"\\tCleaning up directory structure\"\n\n    local files=(\"$tmpdir\"/*) name i=1\n\n    if (( ${#files[@]} == 1 )) && [[ -d \"${files[0]}\" ]]; then\n        name=$(basename \"${files[0]}\")\n        files=(\"$tmpdir\"/*/*)\n    else\n        name=$(basename \"$archive\"); name=${archive%.*}\n        files=(\"$tmpdir\"/*)\n    fi\n\n    if [[ -z \"$destdir\" ]]; then\n        destdir=./\"$name\"\n    fi\n\n    while [[ -f \"$destdir\" ]]; do\n        destdir=${destdir}-$((i++));\n    done\n\n    echo -e \"\\tCopying files to ${destdir}\"\n\n    mkdir -p \"$destdir\"\n    cp -ar \"$@\" -t \"$destdir\" -- \"${files[@]}\"\n    rm -rf \"$tmpdir\"\n)\n\nfunction unpack_zip {\n    echo -e \"Unpacking server files...\"\n    unzip-strip server.zip \"${SERVER_DIR}\"\n    rm -rf server.zip\n}\n\n\nfunction json_download_neoforge {\n    echo \"Downloading NeoForge...\"\n\n    local MC_VERSION=$MINECRAFT_VERSION\n    local NEOFORGE_VERSION=$LOADER_VERSION\n\n    # Remove spaces from the version number to avoid issues with curl\n    NEOFORGE_VERSION=\"$(echo \"$NEOFORGE_VERSION\" | tr -d ' ')\"\n    MC_VERSION=\"$(echo \"$MC_VERSION\" | tr -d ' ')\"\n\n    if [[ ! -z ${NEOFORGE_VERSION} ]]; then\n        if [[ ${NEOFORGE_VERSION} =~ 1\\.20\\.1- ]]; then\n            DOWNLOAD_LINK=\"https://maven.neoforged.net/releases/net/neoforged/forge/${NEOFORGE_VERSION}/forge-${NEOFORGE_VERSION}\"\n            ARTIFACT_NAME=\"forge\"\n        else\n            DOWNLOAD_LINK=\"https://maven.neoforged.net/releases/net/neoforged/neoforge/${NEOFORGE_VERSION}/neoforge-${NEOFORGE_VERSION}\"\n            ARTIFACT_NAME=\"neoforge\"\n        fi\n    else\n        if [[ ${MC_VERSION} =~ 1\\.20\\.1 ]]; then\n            XML_DATA=$(curl -sSL https://maven.neoforged.net/releases/net/neoforged/forge/maven-metadata.xml)\n            ARTIFACT_NAME=\"forge\"\n            NEOFORGE_OLD=1\n        else\n            XML_DATA=$(curl -sSL https://maven.neoforged.net/releases/net/neoforged/neoforge/maven-metadata.xml)\n            ARTIFACT_NAME=\"neoforge\"\n        fi\n\n        REPO_URL=\"https://maven.neoforged.net/releases/net/neoforged/${ARTIFACT_NAME}/\"\n\n        if [[ ${MC_VERSION} =~ latest || ${MC_VERSION} == \"\" ]]; then\n            echo \"Getting latest version of NeoForge.\"\n            MC_VERSION=\"1.$(echo -e ${XML_DATA} | xq -x '/metadata/versioning/release' | cut -d'.' -f1-2)\"\n        fi\n\n        echo \"Minecraft version: ${MC_VERSION}\"\n\n        if [[ -z \"${NEOFORGE_OLD}\" ]]; then\n            VERSION_KEY=$(echo -n ${MC_VERSION} | cut -d'.' -f2-)\n        else\n            VERSION_KEY=\"${MC_VERSION}-\"\n        fi\n\n        NEOFORGE_VERSION=$(echo -e ${XML_DATA} | xq -x \"(/metadata/versioning/versions/*[starts-with(text(), '${VERSION_KEY}')])\" | tail -n1)\n        if [[ -z \"${NEOFORGE_VERSION}\" ]]; then\n            echo \"The install failed, because there is no valid version of NeoForge for the version of Minecraft selected.\"\n            exit 1\n        fi\n\n        echo \"NeoForge version: ${NEOFORGE_VERSION}\"\n\n        DOWNLOAD_LINK=\"${REPO_URL}${NEOFORGE_VERSION}/${ARTIFACT_NAME}-${NEOFORGE_VERSION}\"\n    fi\n\n    echo \"Downloading NeoForge version ${NEOFORGE_VERSION}\"\n    echo \"Download link is ${DOWNLOAD_LINK}\"\n\n    if [[ ! -z \"${DOWNLOAD_LINK}\" ]]; then\n        if curl --output /dev/null --silent --head --fail ${DOWNLOAD_LINK}-installer.jar; then\n            echo -e \"Installer jar download link is valid.\"\n        else\n            echo -e \"Link is invalid. Exiting now\"\n            exit 2\n        fi\n    else\n        echo -e \"No download link provided. Exiting now\"\n        exit 3\n    fi\n\n    local INSTALLER_JAR=\"neoforge-${NEOFORGE_VERSION}-installer.jar\"\n    local INSTALLER_LOG=\"installer.jar.log\"\n\n    curl -s -o ${INSTALLER_JAR} -sS ${DOWNLOAD_LINK}-installer.jar\n\n    if [[ ! -f ./${INSTALLER_JAR} ]]; then\n        echo \"!!! Error downloading NeoForge version ${NEOFORGE_VERSION} !!!\"\n        exit 4\n    fi\n\n    rm -rf libraries/net/neoforged/${ARTIFACT_NAME}\n    rm unix_args.txt\n\n    echo -e \"Installing NeoForge server.\\n\"\n    if ! java -jar ${INSTALLER_JAR} --installServer > ${INSTALLER_LOG} 2>&1; then\n        echo -e \"\\nInstall failed using NeoForge version ${NEOFORGE_VERSION} and Minecraft version ${MINECRAFT_VERSION}.\"\n        exit 5\n    fi\n\n    ln -sf libraries/net/neoforged/${ARTIFACT_NAME}/*/unix_args.txt unix_args.txt\n\n    echo -e \"Deleting ${INSTALLER_JAR} and ${INSTALLER_LOG} files.\\n\"\n    rm -rf ${INSTALLER_JAR} ${INSTALLER_LOG}\n\n    echo \"Installation process is completed!\"\n}\n\nfunction create_stylelabor_js {\n    local script_dir=\"${SERVER_DIR}/kubejs/server_scripts/StyleLabor\"\n    local script_file=\"${script_dir}/stylelabor.js\"\n\n    # Ensure the directory exists\n    mkdir -p \"$script_dir\"\n\n    # Create the stylelabor.js file\n    echo \"Creating stylelabor.js...\"\n    cat <<EOF > \"$script_file\"\nServerEvents.recipes((e) => {\n  let makeID = (type, output, input) => {\n    return _makeID('mekanism', type, output, input);\n  };\n\n  let metallurgic_infusing = (output, input, chem, perTick) => {\n    e.recipes.mekanism.metallurgic_infusing(output, input, chem, perTick ? perTick : false).id(makeID('metallurgic_infusing', output, input));\n  };\n\n  // StyleLabor ae2:sky_stone_block\n  metallurgic_infusing('ae2:sky_stone_block', 'minecraft:deepslate', '40x mekanism:diamond');\n\n  // StyleLabor Uraninite Recipe\n  metallurgic_infusing('powah:uraninite_raw', 'modern_industrialization:uranium_ingot', '40x mekanism:diamond');\n});\nEOF\n    echo \"stylelabor.js created successfully.\"\n}\n\nfunction clean_mods_folder {\n    local MODS_DIR=\"${SERVER_DIR}/mods\"\n    if [[ -d \"${MODS_DIR}\" ]]; then\n        echo \"Deleting existing mods folder...\"\n        rm -rf \"${MODS_DIR}\"\n    fi\n}\n\nclean_mods_folder\ninstall_required\n\nif [[ -z \"${PROJECT_ID}\" ]]; then\n    echo \"ERROR: You must specify a PROJECT_ID environment variable!\"\n    exit 1\nfi\n\nif [[ ! \"${PROJECT_ID}\" = \"zip\" ]]; then\n    get_download\nfi\n\nget_loader\nunpack_zip\n\nif [[ -f \"${SERVER_DIR}/manifest.json\" ]]; then\n    echo \"Found manifest.json, installing mods\"\n    json_download_mods\n    json_download_overrides\nfi\n\nif [[ -f \"${SERVER_DIR}/client.manifest.json\" ]]; then\n    MANIFEST=\"${SERVER_DIR}/client.manifest.json\"\n\n    if [[ $LOADER_NAME == \"neoforge\" ]]; then\n        json_download_neoforge\n    fi\nfi\n\n# Create eula.txt to accept the EULA\necho \"eula=true\" > \"${SERVER_DIR}/eula.txt\"\n\n# Run the startserver.sh script to install all mods and complete the setup\nif [[ -f \"${SERVER_DIR}/startserver.sh\" ]]; then\n    echo \"Running startserver.sh to complete the setup...\"\n    chmod +x \"${SERVER_DIR}/startserver.sh\"\n    \"${SERVER_DIR}/startserver.sh\"\nelse\n    echo \"ERROR: startserver.sh not found in ${SERVER_DIR}\"\n    exit 1\nfi\n\n# Download extra mods\ndownload_extra_mods\n\n# Download extra mods\ndownload_extra_mods\n\n# Create neoforwarding-server.toml\ncreate_neoforwarding_config\n\n# Create stylelabor.js\ncreate_stylelabor_js\n\necho -e \"\\nInstall completed successfully, enjoy!\""
    }
  },
  "variables": [
    {
      "name": "Modpack Project ID",
      "description": "The modpack project ID from the CurseForge site on the pack page, or 'zip' if installing from an uploaded server.zip file.\r\n\r\nFor example, the project Id of https://www.curseforge.com/minecraft/modpacks/bofa-mods ID is 375152",
      "env_variable": "PROJECT_ID",
      "default_value": "",
      "user_viewable": true,
      "user_editable": true,
      "rules": "required|string",
      "field_type": "text"
    },
    {
      "name": "Modpack File ID",
      "description": "The file ID belonging to a specific version of a modpack. Can either be the main file or the file ID associated with the server pack.\r\n\r\nIf not provided the script will attempt to retrieve the latest server pack or client pack available.",
      "env_variable": "VERSION_ID",
      "default_value": "latest",
      "user_viewable": true,
      "user_editable": true,
      "rules": "string",
      "field_type": "text"
    },
    {
      "name": "Velocity Secret Key",
      "description": "The secret key used for forwarding in Velocity.",
      "env_variable": "VELOCITY_SECRET_KEY",
      "default_value": "",
      "user_viewable": true,
      "user_editable": true,
      "rules": "required|string",
      "field_type": "text"
    },
    {
      "name": "CurseForge API Key",
      "description": "A CurseForge API key is required to use this egg. You can learn how to get an API key here: https://support.curseforge.com/en/support/solutions/articles/9000208346-about-the-curseforge-api-and-how-to-apply-for-a-key",
      "env_variable": "API_KEY",
      "default_value": "",
      "user_viewable": true,
      "user_editable": true,
      "rules": "required|string|max:60",
      "field_type": "text"
    }
  ]
}