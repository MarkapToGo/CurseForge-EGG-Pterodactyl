{
    "_comment": "DO NOT EDIT: FILE GENERATED AUTOMATICALLY BY PTERODACTYL PANEL - PTERODACTYL.IO",
    "meta": {
        "version": "PTDL_v2",
        "update_url": null
    },
    "exported_at": "2024-12-14T11:57:41+01:00",
    "name": "FTB-APP - Markap",
    "author": "Forked by Markap",
    "description": "Since the release of the FTB APP, FTB modpacks are now distributed through modpacks.ch. This egg was developed for support for modpacks that are distributed through this.",
    "features": [
        "eula",
        "java_version",
        "pid_limit"
    ],
    "docker_images": {
        "Java 8": "ghcr.io\/pterodactyl\/yolks:java_8",
        "Java 11": "ghcr.io\/pterodactyl\/yolks:java_11",
        "Java 16": "ghcr.io\/pterodactyl\/yolks:java_16",
        "Java 17": "ghcr.io\/pterodactyl\/yolks:java_17",
        "Java 18": "ghcr.io\/pterodactyl\/yolks:java_18",
        "Java 21": "ghcr.io\/pterodactyl\/yolks:java_21"
    },
    "file_denylist": [],
    "startup": "java -javaagent:log4jfix/Log4jPatcher-1.0.0.jar -Xms128M -XX:MaxRAMPercentage=95.0 -Dterminal.jline=false -Dterminal.ansi=true --add-modules=jdk.incubator.vector -XX:+UseG1GC -XX:+ParallelRefProcEnabled -XX:MaxGCPauseMillis=200 -XX:+UnlockExperimentalVMOptions -XX:+DisableExplicitGC -XX:+AlwaysPreTouch -XX:G1HeapWastePercent=5 -XX:G1MixedGCCountTarget=4 -XX:InitiatingHeapOccupancyPercent=15 -XX:G1MixedGCLiveThresholdPercent=90 -XX:G1RSetUpdatingPauseTimePercent=5 -XX:SurvivorRatio=32 -XX:+PerfDisableSharedMem -XX:MaxTenuringThreshold=1 -Dusing.aikars.flags=https://mcflags.emc.gs -Daikars.new.flags=true -XX:G1NewSizePercent=40 -XX:G1MaxNewSizePercent=50 -XX:G1HeapRegionSize=16M -XX:G1ReservePercent=15 @user_jvm_args.txt @libraries/net/neoforged/neoforge/${SPECIFIED_FORGE_VERSION}/unix_args.txt libraries/net/neoforged/neoforge/${SPECIFIED_FORGE_VERSION}/neoforge-${SPECIFIED_FORGE_VERSION}-server.jar",
    "config": {
        "files": "{\r\n    \"server.properties\": {\r\n        \"parser\": \"properties\",\r\n        \"find\": {\r\n            \"server-ip\": \"0.0.0.0\",\r\n            \"server-port\": \"{{server.build.default.port}}\",\r\n            \"query.port\": \"{{server.build.default.port}}\"\r\n        }\r\n    }\r\n}",
        "startup": "{\r\n    \"done\": \")! For help, type \"\r\n}",
        "logs": "{}",
        "stop": "stop"
    },
    "scripts": {
        "installation": {
            "script": "#!/bin/bash\n# FTB Pack Installation Script # Install script for FTB modpacks using the FTB modpacks API.\n#\n# Server Files: /mnt/server\nif [ ! -d /mnt/server ]; then\n    mkdir -p /mnt/server\nfi\ncd /mnt/server\n\n# Record the start time\nstart_time=$(date +%s)\n\n# Download needed software.\nfunction install_required {\n    apt update\n    apt install -y curl jq\n}\n\nfunction get_modpack_id {\n    urlencode() {\n        local string=\"${1// /%20}\"\n        echo \"$string\"\n    }\n\n    # if no modpack id is set and modpack search term is set.\n    if [ -z ${FTB_MODPACK_ID} ] && [ ! -z \"${FTB_SEARCH_TERM}\" ]; then\n        encoded_search_term=$(urlencode \"$FTB_SEARCH_TERM\")\n        JSON_DATA=$(curl -sSL https://api.modpacks.ch/public/modpack/search/8?term=\"${encoded_search_term}\")\n\n        # grabs the first modpack in array.\n        FTB_MODPACK_ID=$(echo -e ${JSON_DATA} | jq -r \".packs[0]\")\n    fi\n\n    if [ -z ${FTB_MODPACK_VERSION_ID} ] && [ ! -z ${FTB_VERSION_STRING} ]; then\n        # grabs the correct version id matching the string.\n        FTB_MODPACK_VERSION_ID=$(curl -sSL https://api.modpacks.ch/public/modpack/${FTB_MODPACK_ID} | jq -r --arg VSTRING ${FTB_VERSION_STRING} '.versions[] | select(.name == $VSTRING) | .id')\n    fi\n}\n\nfunction run_installer {\n    # get architecture for installer\n    INSTALLER_TYPE=$([ \"$(uname -m)\" == \"x86_64\" ] && echo \"linux\" || echo \"arm/linux\")\n    echo \"ModpackID: ${FTB_MODPACK_ID} VersionID: ${FTB_MODPACK_VERSION_ID} InstallerType: ${INSTALLER_TYPE}\"\n\n    # download installer\n    curl -L https://api.modpacks.ch/public/modpack/0/0/server/${INSTALLER_TYPE} --output serversetup\n    chmod +x ./serversetup\n\n    # remove old forge files (to allow updating)\n    rm -rf libraries/net/minecraftforge/forge\n    rm -rf libraries/net/neoforged\n    rm -f unix_args.txt\n\n    # run installer\n    ./serversetup ${FTB_MODPACK_ID} ${FTB_MODPACK_VERSION_ID} --auto --noscript --nojava\n}\n\nfunction install_specified_forge_version {\n    if [[ -n \"${SPECIFIED_FORGE_VERSION}\" ]]; then\n        echo \"Removing old NeoForge version...\"\n        rm -rf libraries/net/neoforged\n        rm -f unix_args.txt\n\n        echo \"Installing specified NeoForge version ${SPECIFIED_FORGE_VERSION}...\"\n        DOWNLOAD_LINK=\"https://maven.neoforged.net/releases/net/neoforged/neoforge/${SPECIFIED_FORGE_VERSION}/neoforge-${SPECIFIED_FORGE_VERSION}-installer.jar\"\n        curl -s -o neoforge-installer.jar ${DOWNLOAD_LINK}\n\n        if [[ ! -f ./neoforge-installer.jar ]]; then\n            echo \"!!! Error downloading NeoForge version ${SPECIFIED_FORGE_VERSION} !!!\"\n            exit 4\n        fi\n\n        java -jar neoforge-installer.jar --installServer\n        ln -sf libraries/net/neoforged/forge/*/unix_args.txt unix_args.txt\n        rm -f neoforge-installer.jar\n    fi\n}\n\n# allows startup command to work\nfunction move_startup_files {\n    # create symlink for forge unix_args.txt if exists\n    if compgen -G \"libraries/net/minecraftforge/forge/*/unix_args.txt\"; then\n        ln -sf libraries/net/minecraftforge/forge/*/unix_args.txt unix_args.txt\n    fi\n\n    # create symlink for neoforge unix_args.txt if exists\n    if compgen -G \"libraries/net/neoforged/forge/*/unix_args.txt\"; then\n        ln -sf libraries/net/neoforged/forge/*/unix_args.txt unix_args.txt\n    fi\n\n    # move forge/neoforge/fabric jar file to start-server.jar if exists\n    if compgen -G \"forge-*.jar\"; then\n        mv -f forge-*.jar start-server.jar\n    elif compgen -G \"fabric-*.jar\"; then\n        mv -f fabric-*.jar start-server.jar\n    fi\n}\n\n# installer cleanup\nfunction installer_cleanup {\n    rm serversetup\n    rm -f run.bat\n    rm -f run.sh\n    rm -f neoforge-installer.jar.log\n}\n\n# run installation steps\ninstall_required\nget_modpack_id\nrun_installer\ninstall_specified_forge_version\nmove_startup_files\ninstaller_cleanup\n\n# Record the end time\nend_time=$(date +%s)\nduration=$((end_time - start_time))\n\n# Display modpack and NeoForge details\necho \"########################################\"\necho \"##                                    ##\"\necho \"##  Finished installing FTB modpack   ##\"\necho \"##            StyleLabor☄\uFE0F            ##\"\necho \"##                                    ##\"\necho \"########################################\"\necho \"\"\necho \"✨ Modpack ID: ${FTB_MODPACK_ID}\"\necho \"\uD83D\uDC3B Modpack Version ID: ${FTB_MODPACK_VERSION_ID}\"\nif [[ -n \"${SPECIFIED_FORGE_VERSION}\" ]]; then\n    echo \"\uD83C\uDF44 NeoForge Version: ${SPECIFIED_FORGE_VERSION}\"\nfi\necho \"\uD83D\uDCBB Installation took ${duration} seconds.\"",
            "container": "openjdk:8-jdk-slim",
            "entrypoint": "bash"
        }
    },
    "variables": [
        {
            "name": "FTB Pack search term",
            "description": "the search term for finding the modpack. needs to be at least 4 characters long.\r\nFind out what term is needed by using the ftb app and searching with the term. make sure it only returns 1 result.\r\ncan also be searched for via: https:\/\/api.modpacks.ch\/public\/modpack\/search\/8?term={SEARCHTERM}\r\n\r\nonly needed if the modpack id and modpack version id is unknown.",
            "env_variable": "FTB_SEARCH_TERM",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "nullable|string",
            "field_type": "text"
        },
        {
            "name": "FTB modpack ID",
            "description": "The FTB Api modpack ID.\r\nNeeded if not using the search variable\r\n\r\nExample: FTB Interactions ID is 5.\r\nhttps:\/\/api.modpacks.ch\/public\/modpack\/5",
            "env_variable": "FTB_MODPACK_ID",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "nullable|integer",
            "field_type": "text"
        },
        {
            "name": "FTB Pack Version",
            "description": "what version of the modpack to install. leave empty if using the modpack version id variable.",
            "env_variable": "FTB_VERSION_STRING",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "nullable|string",
            "field_type": "text"
        },
        {
            "name": "FTB Pack Version ID",
            "description": "The modpack api version ID.\r\nneeded if not using the string for the version.\r\n\r\nExample FTB Revelations version id for version \"2.0.2\" is 86.\r\nwhich would come out as: https:\/\/api.modpacks.ch\/public\/modpack\/5\/86",
            "env_variable": "FTB_MODPACK_VERSION_ID",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "nullable|integer",
            "field_type": "text"
        },
        {
            "name": "Specified Forge Version",
            "description": "Specify the NeoForge or Forge version to use. Leave empty to use the version determined by the installer.",
            "env_variable": "SPECIFIED_FORGE_VERSION",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "nullable|string",
            "field_type": "text"
        }
    ]
}